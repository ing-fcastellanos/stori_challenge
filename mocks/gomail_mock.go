// Code generated by MockGen. DO NOT EDIT.
// Source: ./utils/mail.go
//
// Generated by this command:
//
//	mockgen -source=./utils/mail.go -destination=mocks/gomail_mock.go
//

// Package mock_utils is a generated GoMock package.
package mock_utils

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	gomail "gopkg.in/gomail.v2"
)

// MockMailer is a mock of Mailer interface.
type MockMailer struct {
	ctrl     *gomock.Controller
	recorder *MockMailerMockRecorder
	isgomock struct{}
}

// MockMailerMockRecorder is the mock recorder for MockMailer.
type MockMailerMockRecorder struct {
	mock *MockMailer
}

// NewMockMailer creates a new mock instance.
func NewMockMailer(ctrl *gomock.Controller) *MockMailer {
	mock := &MockMailer{ctrl: ctrl}
	mock.recorder = &MockMailerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMailer) EXPECT() *MockMailerMockRecorder {
	return m.recorder
}

// DialAndSend mocks base method.
func (m *MockMailer) DialAndSend(message gomail.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DialAndSend", message)
	ret0, _ := ret[0].(error)
	return ret0
}

// DialAndSend indicates an expected call of DialAndSend.
func (mr *MockMailerMockRecorder) DialAndSend(message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DialAndSend", reflect.TypeOf((*MockMailer)(nil).DialAndSend), message)
}
